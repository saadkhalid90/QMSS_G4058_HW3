grouped_df
grouped_df <- group_by(df, Sex, Age, Survived) %>%
summarise(proportion = sum(Freq))
grouped_df <- group_by(df, Sex, Age, Survived) %>%
summarise(proportion = sum(Freq))
grouped_df
df <- as.data.frame(Titanic)
grouped_df <- group_by(df, Sex, Age, Survived) %>%
summarise(proportion = sum(Freq))
grouped_df
grouped_df <- group_by(df, Sex, Age, Survived) %>%
summarise(Number = sum(Freq))
grouped_df
compd_int <- function(n = 360, L, i){
if (!(is.numeric(L) && is.numeric(i) && is.numeric(n))){
stop("All arguments need to be numeric")
}
else{
P = (L*i) / (1 - (1/(1+i))^n)
return(P)
}
}
compd_int(L=300000, i = 0.035)
compd_int(L=300000, i = 0.035, n = 360)
compd_int(L=300000, i = 0.035, n = 230)
compd_int(L=300000, i = 0.035, n = 250)
integer_vector <- c(1, 2, 3)
str(integer_vector)
integer_factor <- as.factor(c(1, 2, 3))
str(integer_factor)
F^F
0^0
F^F == 0^0
help(setdiff)
examples(setdiff)
example(setdiff)
set(c("A","B"))
A <- c("A","B"))
A <- c("A","B")
B <- c("A")
setdiff(A, B)
A <- c("A","B")
B <- c("B")
setdiff(A, B)
example(sweep)
data(swiss)
str(swiss)
## pr_comps <- prcomp(College, scale. = TRUE, na.rm = T)
bwplot(~ Price | DriveTrain, data = Cars93,
xlab = "Distribution of Price across DriveTrain", nc)
bwplot(~ Price | DriveTrain, data = Cars93,
xlab = "Distribution of Price across DriveTrain")
set.seed(2)
x = martix(rnorm(50*2), ncol = 2)
matrix(1:3)
x = matrix(rnorm(50*2), ncol = 2)
x[1:25, 1] = x[1:25, 1] + 3
km$out <- kmeans(x, 2, nstart = 20)
km.out <- kmeans(x, 2, nstart = 20)
km.out$cluster
plot(x, col = (km.out$cluster + 1),
main = "K- means clustering with k = 2",
xlab = "",
ylab = "",
pch = 20,
cex = 2)
set.seed(4)
km.out
plot(x, col = (km.out$cluster + 1),
main = "K- means clustering with k = 3",
xlab = "",
ylab = "",
pch = 20,
cex = 2)
km.out <- kmeans(x, 3, nstart = 20)
km.out
plot(x, col = (km.out$cluster + 1),
main = "K- means clustering with k = 3",
xlab = "",
ylab = "",
pch = 20,
cex = 2)
km.out = kmeans(x, 3, nstart = 1)
km.out$tot.withiness
km.out = kmeans(x, 3, nstart = 20)
km.out$tot.withiness
km.out = kmeans(x, 3, nstart = 20)
km.out$tot.withiness
km.out$tot.withinss
km.out$tot.withinss
km.out = kmeans(x, 3, nstart = 1)
km.out$tot.withinss
set.seed(2)
x = matrix(rnorm(50 * 2), ncol = 2)
x[1:25, 1] = x[1:25, 1] + 3
x[1:25, 2] = x[1:25, 2] - 4
km.out <- kmeans(x, 2, nstart = 20)
km.out$cluster
plot(x, col = (km.out$cluster + 1),
main = "K- means clustering with k = 2",
xlab = "",
ylab = "",
pch = 20,
cex = 2)
set.seed(4)
km.out <- kmeans(x, 3, nstart = 20)
km.out
plot(x, col = (km.out$cluster + 1),
main = "K- means clustering with k = 3",
xlab = "",
ylab = "",
pch = 20,
cex = 2)
set.seed(3)
km.out = kmeans(x, 3, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 3, nstart = 20)
km.out$tot.withinss
pr_comps <- prcomp(College, scale. = TRUE, na.rm = T)
pr_comps <- prcomp(College, scale. = TRUE)
pr_comps <- prcomp(as.numeric(College), scale. = TRUE)
College$Private <- as.numeric(College$Private)
pr_comps <- prcomp(College, scale. = TRUE)
pr_var <- pr_comps$sdev ^ 2
pr_var
pve <- pr_var / sum(pr_var)
pve
plot(cumsum(pve), xlab="Principal Component", ylab="Cumulative Proportion of Variance Explained", ylim=c(0,1),type='b')
```
cumsum(pve)
stopifnot(require(pcaPP))
pr_out <- PCAproj(College, scale = sd)
names(pr_out)
par(mar = c(5,4,3,3) + .1, las = 1, cex = 0.8)
rownames(pr_out$scores) <- rownames(USArrests)
biplot(pr_out, scale = 0)
par(mar = c(5,4,3,3) + .1, las = 1, cex = 0.8)
rownames(pr_out$scores) <- rownames(College)
biplot(pr_out, scale = 0)
t <- 1:360
apply(t, compd_int)
apply(t, compd_int(n = t, i , L))
data(swiss)
data(swiss)
swiss <- sweep(swiss, 2, apply(swiss, 2, mean), "-")
swiss <- sweep(swiss, 2, apply(swiss, 2, sd), "/")
```
data(swiss)
swiss <- sweep(swiss, 2, apply(swiss, 2, mean))
swiss <- sweep(swiss, 2, apply(swiss, 2, sd))
data(swiss)
swiss <- sweep(swiss, 2, apply(swiss, 2, mean))
swiss <- sweep(swiss, 2, apply(swiss, 2, sd))
View(swiss)
View(swiss)
View(swiss)
View(swiss)
data(swiss)
swiss <- sweep(swiss, apply(swiss, mean))
swiss <- sweep(swiss, apply(swiss, sd))
data(swiss)
swiss <- sweep(swiss, 2, apply(swiss, 2, mean))
swiss <- sweep(swiss, 2, apply(swiss, 2, sd))
View(swiss)
View(swiss)
example(sweep)
data(swiss)
sweep(swiss)
sweep(swiss, 0, 1)
sweep(swiss, 1:10, 1)
compd_int(L=300000, i = 0.035, n = 1)
compd_int(L=300000, i = 0.035, n = 360)
set.seed(2)
x <- matrix(rnorm(50 * 2), ncol = 2)
x[1:25, 1] = x[1:25, 1] + 3
x[1:25, 2] = x[1:25, 2] - 4
km.out <- kmeans(x, 2, nstart = 20)
km.out$cluster
plot(x, col = (km.out$cluster + 1),
main = "K- means clustering with k = 2",
xlab = "",
ylab = "",
pch = 20,
cex = 2)
set.seed(4)
km.out <- kmeans(x, 3, nstart = 20)
km.out
plot(x, col = (km.out$cluster + 1),
main = "K- means clustering with k = 3",
xlab = "",
ylab = "",
pch = 20,
cex = 2)
set.seed(3)
km.out <- kmeans(x, 3, nstart = 1)
km.out$tot.withinss
km.out <- kmeans(x, 3, nstart = 20)
km.out$tot.withinss
lapply(t, compd_int(L=300000, i = 0.035, n = t))
grouped_df <- group_by(df, Sex, Age, Survived) %>%
summarise(Number = sum(Freq)/n())
grouped_df
grouped_df <- group_by(df, Sex, Age, Survived) %>%
summarise(Number = sum(Freq))
grouped_df
example(sweep)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x) # warning: this may take a number of minutes
rep(12 * 30, 12 * 30)
c('lars', 'robust', 'robustbase', 'quantreg')
pkgs <- c('lars', 'robust', 'robustbase', 'quantreg')
install.packages(pkgs, dependencies = T)
install.packages('pls', dependencies = T)
?scale
packages %in% installed.packages()
packages <- c("ggmap",
"rgdal",
"rgeos",
"maptools",
"dplyr",
"tidyr",
"tmap",
"maps")
packages %in% installed.packages()
new_packages <- packages[packages %in% installed.packages()]
new_packages
packages <- c("ggmap",
"rgdal",
"rgeos",
"maptools",
"dplyr",
"tidyr",
"tmap",
"maps")
new_packages <- packages[!packages %in% installed.packages()]
new_packages
length(new_packages)
new_packages <- packages[!packages %in% installed.packages()]
if (length(new_packages) > 0){
install.packages(new_packages)
}
?"library"
library(ggplot2, character.only = T)
library(ggplot2, character.only = F)
library('ggplot2', character.only = T)
library('ggplot2', character.only = T)
lapply(packages, library)
sapply(packages, library)
lapply(packages, library)
lapply(packages, library, character.only = T)
getwd()
suppressPackageStartupMessages(library(openintro))
data(countyComplete)
countyComplete$growth <- with(countyComplete, (pop2010 - pop2000) / pop2000 * 100)
include <- sample(nrow(countyComplete), size = 2000, replace = FALSE)
training <- countyComplete[include, ]
testing <- countyComplete[-include, ]
countyComplete$fedratio <- cut(countyComplete$fed_spending,
breaks = 3,
include.lowest = TRUE, ordered_result = TRUE)
countyComplete$firms_cut <- cut(countyComplete$firms,
breaks = c(0,2350,1047000),
include.lowest = TRUE, ordered_result = TRUE)
countyComplete$immigration_rate <- cut(countyComplete$foreign_born,
breaks = 2,
include.lowest = TRUE, ordered_result = TRUE)
ols <- lm(growth ~ per_capita_income + foreign_born + fed_spending + firms,
data = countyComplete)
summary(ols)
yhat <- predict(ols, newdata = testing)
with(testing, mean(((growth-yhat)^2),na.rm = TRUE)) #the mean-squared error of the prediction model
ols <- lm(growth ~ .,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- countyComplete$growth
lar <- lars(X, y, type = "lar", trace = FALSE)
library(lars)
lar <- lars(X, y, type = "lar", trace = FALSE)
suppressPackageStartupMessages(library(openintro))
data(countyComplete)
countyComplete$growth <- with(countyComplete, (pop2010 - pop2000) / pop2000 * 100)
include <- sample(nrow(countyComplete), size = 2000, replace = FALSE)
training <- countyComplete[include, ]
testing <- countyComplete[-include, ]
countyComplete$fedratio <- cut(countyComplete$fed_spending,
breaks = 3,
include.lowest = TRUE, ordered_result = TRUE)
countyComplete$firms_cut <- cut(countyComplete$firms,
breaks = c(0,2350,1047000),
include.lowest = TRUE, ordered_result = TRUE)
countyComplete$immigration_rate <- cut(countyComplete$foreign_born,
breaks = 2,
include.lowest = TRUE, ordered_result = TRUE)
ols <- lm(growth ~ per_capita_income + foreign_born + fed_spending + firms,
data = countyComplete)
summary(ols)
yhat <- predict(ols, newdata = testing)
with(testing, mean(((growth-yhat)^2),na.rm = TRUE)) #the mean-squared error of the prediction model
library(lars)
ols <- lm(growth ~ .,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
lar <- lars(X, y, type = "lar", trace = FALSE)
yhat_lar <- predict(lasso, newx = test_X)$fit
ols <- lm(growth ~ .,
data = training)
ols
summary(ols)
ols <- lm(growth ~ .,
data = training)
ols <- lm(growth ~ per_capita_income + foreign_born + fed_spending + firms,
data = countyComplete)
summary(ols)
ols
ols <- lm(growth ~ per_capita_income + foreign_born + fed_spending + firms,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
lar <- lars(X, y, type = "lar", trace = FALSE)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
ols
dim(X)
length(y)
training <- na.omit(training)
ols <- lm(growth ~ per_capita_income + foreign_born + fed_spending + firms,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
lar <- lars(X, y, type = "lar", trace = FALSE)
yhat_lar <- predict(lasso, newx = test_X)$fit
yhat_lar <- predict(lar, newx = test_X)$fit
training <- na.omit(training)
ols <- lm(growth ~ .,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(growth ~ .,data = testing)[ ,-1]
yhat_lasso <- predict(lasso, newx = test_X)$fit
training <- na.omit(training)
na.omit(testing)
training <- na.omit(training)
ols <- lm(growth ~ .,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
lasso <- lars(X, y, type = "lasso", trace = FALSE)
testing <- na.omit(testing)
test_X <- model.matrix(growth ~ .,data = testing)[ ,-1]
yhat_lasso <- predict(lasso, newx = test_X)$fit
library(lars)
training <- na.omit(training)
ols <- lm(growth ~ .,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
lasso <- lars(X, y, type = "lasso", trace = FALSE)
testing <- na.omit(testing)
test_X <- model.matrix(growth ~ .,data = testing)[ ,-1]
yhat_lasso <- predict(lasso, newx = test_X)$fit
dim(test_X)
PCR <- pcr(growth ~ .,
data = training)
require(pls)
PCR <- pcr(growth ~ .,
data = training)
## Question 1:
suppressPackageStartupMessages(library(openintro))
data(countyComplete)
countyComplete$growth <- with(countyComplete, (pop2010 - pop2000) / pop2000 * 100)
## splitting into training and testing set
include <- sample(nrow(countyComplete), size = 2000, replace = FALSE)
training <- countyComplete[include, ]
testing <- countyComplete[-include, ]
countyComplete$growth <- with(countyComplete, (pop2010 - pop2000) / pop2000 * 100)
countyComplete$fedratio <- cut(countyComplete$fed_spending,
breaks = quantile(countyComplete$fed_spending, na.rm = T),
include.lowest = TRUE, ordered_result = TRUE)
countyComplete$firms_cut <- cut(countyComplete$firms,
breaks = 3,
include.lowest = TRUE, ordered_result = TRUE)
countyComplete$immigration_rate <- cut(countyComplete$foreign_born,
breaks = 2,
include.lowest = TRUE, ordered_result = TRUE)
with(training,
plot(x = per_capita_income , y = growth, col = fedratio))
with(countyComplete,
plot(x = per_capita_income , y = growth, col = fedratio))
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(training$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
legend("topleft", legend = levels(training$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(training$fedratio), text.col = 1:4, title = "Factor of federal spending",
legend("topleft", legend = levels(training$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
legend("topleft", legend = levels(training$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
with(countyComplete,
plot(x = per_capita_income , y = growth, col = fedratio),
xlab = "Per capita Income",
ylab = "Growth")
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(training$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
legend("topleft", legend = levels(countyComplete$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
par(cex = 0.5)
with(countyComplete,
plot(x = per_capita_income , y = growth, col = fedratio),
xlab = "Per capita Income",
ylab = "Growth")
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(countyComplete$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
par(cex = 0.5)
par(cex = 0.5)
with(countyComplete,
plot(x = per_capita_income , y = growth, col = fedratio),
xlab = "Per capita Income",
ylab = "Growth")
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(countyComplete$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
par(cex = 0.5)
with(countyComplete,
plot(x = per_capita_income , y = growth, col = fedratio),
xlab = "Per capita Income",
ylab = "Growth")
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(countyComplete$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
par(cex = 0.5)
with(countyComplete,
plot(x = per_capita_income , y = growth, col = fedratio,
xlab = "Per capita Income",
ylab = "Growth"))
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(countyComplete$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
par(cex = 0.5)
with(countyComplete,
plot(x = per_capita_income , y = growth, col = fedratio,
xlab = "Per capita Income",
ylab = "Growth",
main = "Plot between per capita income and growth by federal spending"))
abline(lm(growth ~ per_capita_income, data = countyComplete), lty = "dashed")
legend("topleft", legend = levels(countyComplete$fedratio), text.col = 1:4, title = "Factor of federal spending",
bg = "lightgray", box.lwd = 0)
ols <- lm(growth ~ per_capita_income + fed_spending + firms,
data = training)
summary(ols)
yhat <- predict(ols, newdata = testing)
with(testing, mean(((growth-yhat)^2),na.rm = TRUE))
library(lars)
training <- na.omit(training)
testing <- na.omit(testing)
ols <- lm(growth ~ .,
data = training)
X <- model.matrix(ols)[ ,-1]
y <- training$growth
lasso <- lars(X, y, type = "lasso", trace = FALSE)
testing <- na.omit(testing)
test_X <- model.matrix(growth ~ .,data = testing)[ ,-1]
yhat_lasso <- predict(lasso, newx = test_X)$fit
PCR <- pcr(growth ~ .,
data = training)
predict(PCR, newdata = testing)$fit
predict(PCR, newdata = testing)
PCR <- pcr(growth ~ .,
data = training)
yhat <- predict(PCR, newdata = testing)
with(testing, mean(((growth-yhat)^2),na.rm = TRUE))
PCR <- pcr(growth ~ per_capita_income + fed_spending + firms,
data = training)
yhat <- predict(PCR, newdata = testing)
with(testing, mean(((growth-yhat)^2),na.rm = TRUE))
install.packages("polstR")
install.packages("polstR")
install.packages("pollstR")
pollstr_polls(page = 1, chart = NULL, state = NULL, topic = NULL,
before = NULL, after = NULL, sort = FALSE, showall = NULL,
max_pages = 1, convert = TRUE)
library(pollstR)
library("pollstR")
install.packages("pollstR")
library(pollstR)
pollstr_polls(page = 1, chart = NULL, state = NULL, topic = NULL,
before = NULL, after = NULL, sort = FALSE, showall = NULL,
max_pages = 1, convert = TRUE)
pollstr_polls(page = 1, chart = NULL, state = NULL, topic = NULL,
before = NULL, after = NULL, sort = FALSE, showall = NULL,
max_pages = 1, convert = TRUE)
polls_data <- pollstr_polls(page = 1, chart = NULL, state = NULL, topic = NULL,
before = NULL, after = NULL, sort = FALSE, showall = NULL,
max_pages = 1, convert = TRUE)
polls_data$polls
View(polls_data$polls)
View(polls_data$questions)
View(polls_data$survey_houses)
View(polls_data$sponsors)
View(polls_data$polls)
View(polls_data$questions)
View(polls_data$questions)
polls_data <- pollstr_polls(page = 1, chart = NULL, state = NULL, topic = '2016-president-dem-primary',
before = NULL, after = NULL, sort = FALSE, showall = NULL,
max_pages = 1, convert = TRUE)
polls_data$questions
View(polls_data$questions)
